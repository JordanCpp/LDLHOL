/*
Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#ifndef LDL_BmpLoad_hpp
#define LDL_BmpLoad_hpp

struct LDL_BmpFileHeader
{
	uint16_t bfType;
	uint32_t bfSize;
	uint16_t bfReserved1;
	uint16_t bfReserved2;
	uint32_t bfOffBits;
};

struct LDL_BmpInfoHeader
{
	uint32_t biSize;
	int32_t  biWidth;
	int32_t  biHeight;
	uint16_t biPlanes;
	uint16_t biBitCount;
	uint32_t biCompression;
	uint32_t biSizeImage;
	int32_t  biXPelsPerMeter;
	int32_t  biYPelsPerMeter;
	uint32_t biClrUsed;
	uint32_t biClrImportant;
};

struct LDL_BmpPalette
{
	uint8_t blue;
	uint8_t green;
	uint8_t red;
	uint8_t alpha;
};

class LDL_BmpLoader
{
public:
	LDL_BmpLoader(LDL_Result* result);
	~LDL_BmpLoader();
	bool Load(const char* path);
	const LDL_Vec2i& Size();
	uint8_t Bpp();
	uint8_t* Pixels();
private:
	void BgrToRgb();
	bool CheckOpen(const char* path);
	bool CheckFileHeader();
	bool CheckInfoHeader();
	bool ReadBytes();
	LDL_Result*       _result;
	uint8_t*          _pixels;
	LDL_FileStream    _input;
	LDL_BmpFileHeader _fileHeader;
	LDL_BmpInfoHeader _infoHeader;
	LDL_Vec2i         _size;
	uint8_t           _bpp;
};

#ifdef LDL_IMPLEMENTATION
LDL_BmpLoader::LDL_BmpLoader(LDL_Result* result) :
	_result(result),
	_pixels(NULL),
	_bpp(0)
{
	LDL_BytesClear(&_fileHeader, 0, sizeof(_fileHeader));
	LDL_BytesClear(&_infoHeader, 0, sizeof(_infoHeader));
}

LDL_BmpLoader::~LDL_BmpLoader()
{
	if (_pixels)
	{
		delete _pixels;
	}
}

bool LDL_BmpLoader::Load(const char* path)
{
	if (CheckOpen(path))
	{
		if (CheckFileHeader())
		{
			if (CheckInfoHeader())
			{
				if (ReadBytes())
				{
					BgrToRgb();

					return true;
				}
			}
		}

		_input.Close();
	}

	return false;
}

const LDL_Vec2i& LDL_BmpLoader::Size()
{
	return _size;
}

uint8_t LDL_BmpLoader::Bpp()
{
	return _bpp;
}

uint8_t* LDL_BmpLoader::Pixels()
{
	return _pixels;
}

void LDL_BmpLoader::BgrToRgb()
{
	size_t count = Size().x * Size().y * Bpp();

	for (size_t i = 0; i < count; i += 3)
	{
		uint8_t b = _pixels[i];
		uint8_t r = _pixels[i + 2];

		_pixels[i]     = r;
		_pixels[i + 2] = b;
	}
}

bool LDL_BmpLoader::CheckOpen(const char* path)
{
	if (!_input.Open(path, LDL_FileStream::ModeOpen))
	{
		_result->Message("Not found file: ", path);
	}

	return _result->Ok();
}

bool LDL_BmpLoader::CheckFileHeader()
{
	_input.Read(&_fileHeader.bfType, sizeof(_fileHeader.bfType));
	if (_fileHeader.bfType != 0x4D42)
		_result->Message("bfType is invalid");

	_input.Read(&_fileHeader.bfSize, sizeof(_fileHeader.bfSize));
	if (_fileHeader.bfSize == 0)
		_result->Message("bfSize is invalid");

	_input.Read(&_fileHeader.bfReserved1, sizeof(_fileHeader.bfReserved1));
	if (_fileHeader.bfReserved1 != 0)
		_result->Message("bfReserved1 is invalid");

	_input.Read(&_fileHeader.bfReserved2, sizeof(_fileHeader.bfReserved2));
	if (_fileHeader.bfReserved2 != 0)
		_result->Message("bfReserved2 is invalid");

	_input.Read(&_fileHeader.bfOffBits, sizeof(_fileHeader.bfOffBits));
	if (_fileHeader.bfType == 0)
		_result->Message("bfOffBits is invalid");

	return _result->Ok();
}

bool LDL_BmpLoader::CheckInfoHeader()
{
	_input.Read(&_infoHeader.biSize, sizeof(_infoHeader.biSize));
	if (_infoHeader.biSize == 0)
		_result->Message("biSize is invalid");

	_input.Read(&_infoHeader.biWidth, sizeof(_infoHeader.biWidth));
	if (_infoHeader.biWidth == 0)
		_result->Message("biWidth is invalid");

	_input.Read(&_infoHeader.biHeight, sizeof(_infoHeader.biHeight));
	if (_infoHeader.biHeight == 0)
		_result->Message("biHeight is invalid");

	_input.Read(&_infoHeader.biPlanes, sizeof(_infoHeader.biPlanes));
	_input.Read(&_infoHeader.biBitCount, sizeof(_infoHeader.biBitCount));
	_input.Read(&_infoHeader.biCompression, sizeof(_infoHeader.biCompression));
	_input.Read(&_infoHeader.biSizeImage, sizeof(_infoHeader.biSizeImage));
	_input.Read(&_infoHeader.biXPelsPerMeter, sizeof(_infoHeader.biXPelsPerMeter));
	_input.Read(&_infoHeader.biYPelsPerMeter, sizeof(_infoHeader.biYPelsPerMeter));
	_input.Read(&_infoHeader.biClrUsed, sizeof(_infoHeader.biClrUsed));
	_input.Read(&_infoHeader.biClrImportant, sizeof(_infoHeader.biClrImportant));

	_size = LDL_Vec2i(_infoHeader.biWidth, _infoHeader.biHeight);
	_bpp  = uint8_t(_infoHeader.biBitCount / 8);

	return _result->Ok();
}

bool LDL_BmpLoader::ReadBytes()
{
	size_t bytes = _bpp * _size.x * abs(_infoHeader.biHeight);

	_pixels = new uint8_t[bytes];

	LDL_ASSERT(_pixels != NULL);

	size_t result = _input.Read(_pixels, bytes);

	if (result == 0)
	{
		_result->Message("Not enough byte data");
	}

	return _result->Ok();
}
#endif

#endif
