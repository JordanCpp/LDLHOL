/*
Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#ifndef LDL_Windows_SoftWin_hpp
#define LDL_Windows_SoftWin_hpp

class LDL_WindowSoftware
{
public:
	LDL_WindowSoftware(LDL_Result* result, const LDL_Vec2i& pos, const LDL_Vec2i& size, const char* title, int mode = LDL_WindowMode::Fixed);
	~LDL_WindowSoftware();
	bool Running();
	void Present();
	void PollEvents();
	const LDL_Vec2i& Size();
	const LDL_Vec2i& Pos();
	bool GetEvent(LDL_Event& event);
	bool WaitEvent(LDL_Event& event);
	void StopEvent();
	const char* Title();
	void Title(const char* title);
	void* NativeHandle();
	void Update();
	uint8_t GetBpp();
	LDL_Surface* GetScreen();
private:
	LDL_Result*    _result;
	LDL_MainWindow _mainWindow;
	BITMAPINFO     _BITMAPINFO;
	LDL_Surface    _Screen;
};

#ifdef LDL_IMPLEMENTATION
LDL_WindowSoftware::LDL_WindowSoftware(LDL_Result* result, const LDL_Vec2i& pos, const LDL_Vec2i& size, const char* title, int mode) :
	_result(result),
	_mainWindow(result, pos, size, title, mode),
	_Screen(size, size, GetBpp())
{
	ZeroMemory(&_BITMAPINFO, sizeof(_BITMAPINFO));
}

LDL_WindowSoftware::~LDL_WindowSoftware()
{
}

bool LDL_WindowSoftware::Running()
{
	return _mainWindow.Running();
}

void LDL_WindowSoftware::Present()
{
	DWORD w = (DWORD)_Screen.Size().x;
	DWORD h = (DWORD)_Screen.Size().y;

	_BITMAPINFO.bmiHeader.biSize = sizeof(BITMAPINFOHEADER);
	_BITMAPINFO.bmiHeader.biWidth = (LONG)w;
	_BITMAPINFO.bmiHeader.biHeight = -(LONG)h;
	_BITMAPINFO.bmiHeader.biPlanes = 1;
	_BITMAPINFO.bmiHeader.biBitCount = _Screen.Bpp() * 8;
	_BITMAPINFO.bmiHeader.biCompression = BI_RGB;

	if (SetDIBitsToDevice(_mainWindow._HDC, 0, 0, w, h, 0, 0, 0, h, _Screen.Pixels(), &_BITMAPINFO, DIB_RGB_COLORS) == 0)
	{
		_result->Message("SetDIBitsToDevice failed");
	}

	Update();
}

void LDL_WindowSoftware::PollEvents()
{
	_mainWindow.PollEvents();
}

const LDL_Vec2i& LDL_WindowSoftware::Size()
{
	return _mainWindow.Size();
}

const LDL_Vec2i& LDL_WindowSoftware::Pos()
{
	return _mainWindow.Pos();
}

bool LDL_WindowSoftware::GetEvent(LDL_Event& event)
{
	return _mainWindow.GetEvent(event);
}

bool LDL_WindowSoftware::WaitEvent(LDL_Event& event)
{
	return _mainWindow.WaitEvent(event);
}

void LDL_WindowSoftware::StopEvent()
{
	_mainWindow.StopEvent();
}

const char* LDL_WindowSoftware::Title()
{
	return _mainWindow.Title();
}

void LDL_WindowSoftware::Title(const char* title)
{
	_mainWindow.Title(title);
}

void* LDL_WindowSoftware::NativeHandle()
{
	return _mainWindow._HWND;
}

void LDL_WindowSoftware::Update()
{
	_mainWindow.Update();
}

uint8_t LDL_WindowSoftware::GetBpp()
{
	return 3;
}

LDL_Surface* LDL_WindowSoftware::GetScreen()
{
	return &_Screen;
}

#endif

#endif
