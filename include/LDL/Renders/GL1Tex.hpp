/*
Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#ifndef LDL_Renders_GL1Tex_hpp
#define LDL_Renders_GL1Tex_hpp

class LDL_TextureOpenGL1
{
public:
	LDL_TextureOpenGL1(const LDL_Vec2i& size, uint8_t* pixels, uint8_t bpp);
	LDL_TextureOpenGL1(const LDL_Vec2i& size, uint8_t bpp);
	LDL_TextureOpenGL1(const LDL_Vec2i& size, uint8_t* pixels, LDL_Palette* palette);
	LDL_TextureOpenGL1(const LDL_Vec2i& size, uint8_t* pixels, LDL_Palette* palette, LDL_Alpha* alpha);
	~LDL_TextureOpenGL1();
	void Copy(const LDL_Vec2i& dstPos, const LDL_Vec2i& srcSize, uint8_t* pixels, uint8_t bpp);
	void Copy(const LDL_Vec2i& dstPos, LDL_Surface* surface, const LDL_Vec2i& srcSize);
	const LDL_Vec2i& Size();
	const LDL_Vec2i& Quad();
	GLuint Id();
private:
	GLint GetFormat(uint8_t bpp);
	GLuint    _id;
	LDL_Vec2i _size;
	LDL_Vec2i _quad;
};

#ifdef LDL_IMPLEMENTATION
LDL_TextureOpenGL1::LDL_TextureOpenGL1(const LDL_Vec2i& size, uint8_t* pixels, uint8_t bpp) :
	_id(0)
{
	LDL_ASSERT(size.x > 0);
	LDL_ASSERT(size.y > 0);
	LDL_ASSERT(bpp >= 1 && bpp <= 4);
	LDL_ASSERT(pixels != NULL);

	_size = size;

	GLint format = GetFormat(bpp);

	int sz = LDL_SelectTextureSize(_size);

	_quad = LDL_Vec2i(sz, sz);

	_id = LDL_CreateTexture((GLsizei)_quad.x, (GLsizei)_quad.y, format);

	Copy(LDL_Vec2i(0, 0), _size, pixels, bpp);
}

LDL_TextureOpenGL1::LDL_TextureOpenGL1(const LDL_Vec2i& size, uint8_t bpp) :
	_id(0)
{
	LDL_ASSERT(size.x > 0);
	LDL_ASSERT(size.y > 0);
	LDL_ASSERT(bpp >= 1 && bpp <= 4);

	_size = size;

	GLint format = GetFormat(bpp);

	int sz = LDL_SelectTextureSize(_size);

	_quad = LDL_Vec2i(sz, sz);

	_id = LDL_CreateTexture((GLsizei)_quad.x, (GLsizei)_quad.y, format);
}

LDL_TextureOpenGL1::LDL_TextureOpenGL1(const LDL_Vec2i& size, uint8_t* pixels, LDL_Palette* palette) :
	_id(0)
{
	LDL_ASSERT(size.x > 0);
	LDL_ASSERT(size.y > 0);
	LDL_ASSERT(pixels != NULL);

	_size = size;

	GLint format = GetFormat(4);

	int sz = LDL_SelectTextureSize(_size);

	_quad = LDL_Vec2i(sz, sz);

	_id = LDL_CreateTexture((GLsizei)_quad.x, (GLsizei)_quad.y, format);

	uint8_t* rgbPixels = new uint8_t[size.x * size.y * 4];

	for (int i = 0; i < size.x * size.y; i++)
	{
		int index = i * 4;

		rgbPixels[index + 0] = palette->Get(pixels[i]).r;
		rgbPixels[index + 1] = palette->Get(pixels[i]).g;
		rgbPixels[index + 2] = palette->Get(pixels[i]).b;
		rgbPixels[index + 3] = 255;
	}

	Copy(LDL_Vec2i(0, 0), _size, rgbPixels, 4);

	delete[] rgbPixels;
}

LDL_TextureOpenGL1::LDL_TextureOpenGL1(const LDL_Vec2i& size, uint8_t* pixels, LDL_Palette* palette, LDL_Alpha* alpha) :
	_id(0)
{
	_size = size;

	GLint format = GetFormat(4);

	int sz = LDL_SelectTextureSize(_size);

	_quad = LDL_Vec2i(sz, sz);

	_id = LDL_CreateTexture((GLsizei)_quad.x, (GLsizei)_quad.y, format);

	uint8_t* rgbPixels = new uint8_t[size.x * size.y * 4];

	for (int i = 0; i < size.x * size.y; i++)
	{
		int index = i * 4;

		if (pixels[i] != alpha->Index())
		{
			rgbPixels[index + 0] = palette->Get(pixels[i]).r;
			rgbPixels[index + 1] = palette->Get(pixels[i]).g;
			rgbPixels[index + 2] = palette->Get(pixels[i]).b;
			rgbPixels[index + 3] = 255;
		}
		else
		{
			rgbPixels[index + 0] = 0;
			rgbPixels[index + 1] = 0;
			rgbPixels[index + 2] = 0;
			rgbPixels[index + 3] = 0;
		}
	}

	Copy(LDL_Vec2i(0, 0), _size, rgbPixels, 4);

	delete[] rgbPixels;
}

LDL_TextureOpenGL1::~LDL_TextureOpenGL1()
{
	LDL_DeleteTexture((GLint)_id);
}

void LDL_TextureOpenGL1::Copy(const LDL_Vec2i& dstPos, const LDL_Vec2i& srcSize, uint8_t* pixels, uint8_t bpp)
{
	GLint format = GetFormat(bpp);

	LDL_GL_CHECK(glTexSubImage2D(GL_TEXTURE_2D, 0, (GLint)dstPos.x, (GLint)dstPos.y, (GLsizei)srcSize.x, (GLsizei)srcSize.y, format, GL_UNSIGNED_BYTE, pixels));
}

void LDL_TextureOpenGL1::Copy(const LDL_Vec2i& dstPos, LDL_Surface* surface, const LDL_Vec2i& srcSize)
{
	Copy(dstPos, srcSize, surface->Pixels(), surface->Bpp());
}

const LDL_Vec2i& LDL_TextureOpenGL1::Size()
{
	return _size;
}

const LDL_Vec2i& LDL_TextureOpenGL1::Quad()
{
	return _quad;
}

GLuint LDL_TextureOpenGL1::Id()
{
	return _id;
}

GLint LDL_TextureOpenGL1::GetFormat(uint8_t bpp)
{
	if (bpp == 3)
	{
		return GL_RGB;
	}

	return GL_RGBA;
}
#endif

#endif
